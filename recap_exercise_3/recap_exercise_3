def no_dupes?(arr)
    counter = Hash.new(0)
    arr.each {|ele| counter[ele] += 1}
    counter.select {|k,v| v == 1}.keys
end

puts 'no_dupes'.upcase
p no_dupes?([1, 1, 2, 1, 3, 2, 4])         # => [3, 4]
p no_dupes?(['x', 'x', 'y', 'z', 'z'])     # => ['y']
p no_dupes?([true, true, true])            # => []
puts

def no_consecutive_repeats?(array)
    return true if array.length == 1
    return false if array.first == array[1]
    no_consecutive_repeats?(array[1..-1])
end

puts 'no_consecutive_repeats'.upcase
p no_consecutive_repeats?(['cat', 'dog', 'mouse', 'dog'])     # => true
p no_consecutive_repeats?(['cat', 'dog', 'dog', 'mouse'])     # => false
p no_consecutive_repeats?([10, 42, 3, 7, 10, 3])              # => true
p no_consecutive_repeats?([10, 42, 3, 3, 10, 3])              # => false
p no_consecutive_repeats?(['x'])                              # => true
puts

def char_indices(str)
    counter = Hash.new{|h,k| h[k] = []}
    str.each_char.with_index {|char, i| counter[char] << i}
    counter
end

puts 'char_indices'.upcase
p char_indices('mississippi')   # => {"m"=>[0], "i"=>[1, 4, 7, 10], "s"=>[2, 3, 5, 6], "p"=>[8, 9]}
p char_indices('classroom')     # => {"c"=>[0], "l"=>[1], "a"=>[2], "s"=>[3, 4], "r"=>[5], "o"=>[6, 7], "m"=>[8]}
puts

def longest_streak(str)
    # return str if str.length == 1
    segs(str).reverse.max_by(&:length)
end

def segs(str)
    empty_array = []
    str.each_char.with_index do |ele, i| 
        x=1 
        until str[i+x] != ele
            x += 1
        end
        empty_array << ele * x
    end
    empty_array
end

puts "longest_streak".upcase
p longest_streak('a')           # => 'a'
p longest_streak('accccbbb')    # => 'cccc'
p longest_streak('aaaxyyyyyzz') # => 'yyyyy
p longest_streak('aaabbb')      # => 'bbb'
p longest_streak('abc')         # => 'c'
puts
require "byebug"
def bi_prime?(num)
    # debugger
    (2..num/2).any? {|x| is_prime?(x) && is_prime?((num / x.to_f))}
end

def is_prime?(num)
    return false unless num.to_i == num
    return false if num < 2
    (2...num).none? {|n| num % n == 0}
end

puts 'bi_prime'.upcase
p bi_prime?(14)   # => true
p bi_prime?(22)   # => true
p bi_prime?(25)   # => true
p bi_prime?(94)   # => true
p bi_prime?(24)   # => false
p bi_prime?(64)   # => false
puts

def vigenere_cipher(string, keys)
    
    code_hash = Hash.new {|h,k| h[k] = []}

    keys.each_with_index do |k, i|
        counter = i
        while counter <= string.length - 1  
            code_hash[k] << counter
            counter += keys.length   
        end
    end

   code_hash.each do |k, char_indices| 
        char_indices.each do |index|
            string[index] = charsar_cypher(string[index], k)
        end
   end

   string
end

def charsar_cypher(char, key)
    alpha = ("a".."z").to_a
    n_index = (alpha.index(char) + key) % 26
    alpha[n_index]
end


puts 'vigenere_cipher'.upcase
p vigenere_cipher("toerrishuman", [1])        # => "upfssjtivnbo"
p vigenere_cipher("toerrishuman", [1, 2])     # => "uqftsktjvobp"
p vigenere_cipher("toerrishuman", [1, 2, 3])  # => "uqhstltjxncq"
p vigenere_cipher("zebra", [3, 0])            # => "ceerd"
p vigenere_cipher("yawn", [5, 1])             # => "dbbo"
puts

def vowel_rotate(str)
    rotated = get_vowels(str)
    stripped = strip(str)
    stripped.split("").map {|char| char == '_' ? rotated.shift : char}.join("")
end

def get_vowels(str)
    str.split("").select {|char| 'aeiou'.include?(char)}.rotate(-1)
end

def strip(str)
    str.split("").map {|char| 'aeiou'.include?(char) ? '_' : char}.join("")
end

puts 'vowel_rotate'.upcase
p vowel_rotate('computer')      # => "cempotur"
p vowel_rotate('oranges')       # => "erongas"
p vowel_rotate('headphones')    # => "heedphanos"
p vowel_rotate('bootcamp')      # => "baotcomp"
p vowel_rotate('awesome')       # => "ewasemo"
puts

class String
    def select(&blc)
        blc ||= Proc.new {|c| false }
        new_string = ''
        each_char {|char| new_string += char if blc.call(char)}
        new_string 
    end

    def map!(&blc)
        each_char.with_index {|char, i| self[i] = blc.call(char, i)}
        self
    end

end
puts 'String#select'.upcase
p "app academy".select { |ch| !"aeiou".include?(ch) }   # => "pp cdmy"
p "HELLOworld".select { |ch| ch == ch.upcase }          # => "HELLO"
p "HELLOworld".select                                   # => ""
puts

puts 'string#map!'.upcase
word_1 = "Lovelace"
word_1.map! do |ch| 
    if ch == 'e'
        '3'
    elsif ch == 'a'
        '4'
    else
        ch
    end
end
p word_1        # => "Lov3l4c3"

word_2 = "Dijkstra"
word_2.map! do |ch, i|
    if i.even?
        ch.upcase
    else
        ch.downcase
    end
end
p word_2        # => "DiJkStRa"
puts

def multiply(a, b)
    return a if b == 1
    return a if b == -1
    b > 0? a + multiply(a, b-1) : a + multiply(a, b+1)
end

puts 'multiply'.upcase
p multiply(3, 5)        # => 15
p multiply(5, 3)        # => 15
p multiply(2, 4)        # => 8
p multiply(0, 10)       # => 0
p multiply(-3, -6)      # => 18
p multiply(3, -6)       # => -18
p multiply(-3, 6)       # => -18
puts

def lucas_sequence(n)
    return [] if n == 0
    return [2] if n == 1
    return [2, 1] if n == 2

    lucray = lucas_sequence(n-1)
    lucray << lucray[-1] + lucray[-2]
end

puts 'lucas'.upcase
p lucas_sequence(0)   # => []
p lucas_sequence(1)   # => [2]    
p lucas_sequence(2)   # => [2, 1]
p lucas_sequence(3)   # => [2, 1, 3]
p lucas_sequence(6)   # => [2, 1, 3, 4, 7, 11]
p lucas_sequence(8)   # => [2, 1, 3, 4, 7, 11, 18, 29]
puts

def prime_factorization(num)
    return [num] if is_prime?(num)

    (2...num).each {|fctr| return [prime_factorization(fctr), prime_factorization(num/fctr)].flatten if num % fctr == 0}

end
puts 'prime_factorization'.upcase
p prime_factorization(12)     # => [2, 2, 3]
p prime_factorization(24)     # => [2, 2, 2, 3]
p prime_factorization(25)     # => [5, 5]
p prime_factorization(60)     # => [2, 2, 3, 5]
p prime_factorization(7)      # => [7]
p prime_factorization(11)     # => [11]
p prime_factorization(2017)   # => [2017]